- name: This play provisions OCP VMs based on intial config
  hosts: vm_host
  vars_files:
    - vars/cluster_vars.yml
    - vars/libvirt.yml
  tasks:
    - terraform:
        force_init: true
        project_path: "terraform/bootstrap"
        variables:
          hostname: "bootstrap"
          libvirt_network: "{{ libvirt.network.network_name }}"
          libvirt_pool: "{{ libvirt.storage.pool_name }}"
          cpu: "{{ cluster_nodes.specs.bootstrap.vcpu }}"
          vm_volume_size: "{{ cluster_nodes.specs.bootstrap.disk }}"
          memory: "{{ cluster_nodes.specs.bootstrap.mem }}"
        state: present
      register: output_bootstrap

    - terraform:
        project_path: "terraform/masters"
        force_init: true
        variables:
          hostname: "master"
          libvirt_network: "{{ libvirt.network.network_name }}"
          libvirt_pool: "{{ libvirt.storage.pool_name }}"
          cpu: "{{ cluster_nodes.specs.masters.vcpu }}"
          memory: "{{ cluster_nodes.specs.masters.mem }}"
          vm_volume_size: "{{ cluster_nodes.specs.masters.disk }}"
          vm_count: "{{ cluster_nodes.host_list.masters | count }}"
        state: present
      register: output_masters

    - terraform:
        project_path: "terraform/workers"
        force_init: true
        variables:
          hostname: "worker"
          libvirt_network: "{{ libvirt.network.network_name }}"
          libvirt_pool: "{{ libvirt.storage.pool_name }}"
          cpu: "{{ cluster_nodes.specs.workers.vcpu }}"
          memory: "{{ cluster_nodes.specs.workers.mem }}"
          vm_volume_size: "{{ cluster_nodes.specs.workers.disk }}"
          vm_count: "{{ cluster_nodes.host_list.workers | count }}"
        state: present
      register: output_workers
    
    - name: Add bootstrap node and set vars
      add_host:
        hostname: 'bootstrap'
        node_hostname: 'bootstrap'
        node_mac: "{{ output_bootstrap.outputs.macs.value[0]|lower }}"
        node_ip: "{{ item.ip }}"
        node_reversedns: "{{ item.ip | ipaddr('revdns') }}"
        node_role: "bootstrap"
        node_fqdn: bootstrap.{{ ocp_domain }}
        groups:
          - "bootstrap"
      loop: "{{ cluster_nodes.host_list.bootstrap }}"

    - name: Add masters to given group
      add_host:
        hostname: 'master-{{ master_idx }}'
        node_hostname: 'master-{{ master_idx }}'
        etcd_fqdn: 'etcd-{{ master_idx }}.{{ ocp_domain }}'
        etcd_ip: '{{ item.ip }}'
        node_mac: "{{ output_masters.outputs.macs.value[master_idx]|lower }}"
        node_ip: "{{ item.ip }}"
        node_reversedns: "{{ item.ip | ipaddr('revdns') }}"
        node_role: "master"
        node_fqdn: master-{{ master_idx }}.{{ ocp_domain }} 
        groups:
          - "masters"
      loop: "{{ cluster_nodes.host_list.masters }}"
      loop_control:
        index_var: master_idx

    - name: Add workers to given group
      add_host:
        hostname: 'worker-{{ worker_idx }}'
        node_hostname: 'worker-{{ worker_idx }}'
        node_mac: "{{ output_workers.outputs.macs.value[worker_idx]|lower }}"
        node_ip: "{{ item.ip }}"
        node_reversedns: "{{ item.ip | ipaddr('revdns') }}"
        node_role: "worker"
        ocp_role: "{{ item.role | default('worker') }}"
        node_fqdn: worker-{{ worker_idx }}.{{ ocp_domain }}
        groups:
          - "workers"
      loop: "{{ cluster_nodes.host_list.workers }}"
      loop_control:
        index_var: worker_idx
